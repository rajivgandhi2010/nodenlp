"use strict";
/**
 * Created by user on 2018/4/19/019.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mod_1 = require("../mod");
class JpSimpleTokenizer extends mod_1.SubSModuleTokenizer {
    constructor() {
        super(...arguments);
        this.name = 'JpSimpleTokenizer';
    }
    split(words, ...argv) {
        return this._splitUnset(words, this._splitText);
    }
    _splitText(text) {
        //const POSTAG = this.segment.POSTAG;
        let self = this;
        let b1 = /[ぁ-ん]/.test(text);
        let b2 = /[ァ-ヴーｱ-ﾝﾞｰ]/.test(text);
        if (!b1 || !b2) {
            if (b1 && /^[ぁ-ん]+$/.test(text) || b2 && /^[ァ-ヴーｱ-ﾝﾞｰ]+$/.test(text)) {
                return [self.debugToken({
                        w: text,
                    }, {
                        [self.name]: b1 ? 0x1 : 0x2,
                    }, true)];
            }
            return null;
        }
        let ret = [];
        text
            .split(/((?:[^ァ-ヴーｱ-ﾝﾞｰ]+)?[ぁ-ん]+(?=[ァ-ヴーｱ-ﾝﾞｰ])|(?:[^ぁ-ん]+)?[ァ-ヴーｱ-ﾝﾞｰ]+(?=[ぁ-ん]))/)
            .forEach(function (w, i) {
            if (w !== '') {
                ret.push(self.debugToken({
                    w,
                }, {
                    [self.name]: /[ぁ-ん]/.test(w) ? 0x1 : 0x2,
                }, true));
            }
        });
        return ret;
    }
}
exports.JpSimpleTokenizer = JpSimpleTokenizer;
exports.init = JpSimpleTokenizer.init.bind(JpSimpleTokenizer);
exports.default = JpSimpleTokenizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnBTaW1wbGVUb2tlbml6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJKcFNpbXBsZVRva2VuaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsZ0NBQXlEO0FBSXpELE1BQWEsaUJBQWtCLFNBQVEseUJBQW1CO0lBQTFEOztRQUdDLFNBQUksR0FBRyxtQkFBbUIsQ0FBQztJQWtENUIsQ0FBQztJQWhEQSxLQUFLLENBQUMsS0FBYyxFQUFFLEdBQUcsSUFBSTtRQUU1QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRVMsVUFBVSxDQUFDLElBQVk7UUFFaEMscUNBQXFDO1FBRXJDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUVoQixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksRUFBRSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFDZDtZQUNDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDcEU7Z0JBQ0MsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7d0JBQ3ZCLENBQUMsRUFBRSxJQUFJO3FCQUNQLEVBQUU7d0JBQ0YsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUc7cUJBQzNCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNWO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELElBQUksR0FBRyxHQUFZLEVBQUUsQ0FBQztRQUV0QixJQUFJO2FBQ0YsS0FBSyxDQUFDLDZFQUE2RSxDQUFDO2FBQ3BGLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBRXRCLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFDWjtnQkFDQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7b0JBQ3hCLENBQUM7aUJBQ0QsRUFBRTtvQkFDRixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUc7aUJBQ3hDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNWO1FBQ0YsQ0FBQyxDQUFDLENBQ0Y7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7Q0FFRDtBQXJERCw4Q0FxREM7QUFFWSxRQUFBLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFrQyxDQUFDO0FBRXBHLGtCQUFlLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC80LzE5LzAxOS5cbiAqL1xuXG5pbXBvcnQgeyBTdWJTTW9kdWxlLCBTdWJTTW9kdWxlVG9rZW5pemVyIH0gZnJvbSAnLi4vbW9kJztcbmltcG9ydCB7IFNlZ21lbnQsIElXb3JkIH0gZnJvbSAnLi4vU2VnbWVudCc7XG5pbXBvcnQgVVN0cmluZyA9IHJlcXVpcmUoJ3VuaS1zdHJpbmcnKTtcblxuZXhwb3J0IGNsYXNzIEpwU2ltcGxlVG9rZW5pemVyIGV4dGVuZHMgU3ViU01vZHVsZVRva2VuaXplclxue1xuXG5cdG5hbWUgPSAnSnBTaW1wbGVUb2tlbml6ZXInO1xuXG5cdHNwbGl0KHdvcmRzOiBJV29yZFtdLCAuLi5hcmd2KTogSVdvcmRbXVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3NwbGl0VW5zZXQod29yZHMsIHRoaXMuX3NwbGl0VGV4dCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX3NwbGl0VGV4dCh0ZXh0OiBzdHJpbmcpOiBJV29yZFtdXG5cdHtcblx0XHQvL2NvbnN0IFBPU1RBRyA9IHRoaXMuc2VnbWVudC5QT1NUQUc7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHRsZXQgYjEgPSAvW+OBgS3jgpNdLy50ZXN0KHRleHQpO1xuXHRcdGxldCBiMiA9IC9b44KhLeODtOODvO+9sS3vvp3vvp7vvbBdLy50ZXN0KHRleHQpO1xuXG5cdFx0aWYgKCFiMSB8fCAhYjIpXG5cdFx0e1xuXHRcdFx0aWYgKGIxICYmIC9eW+OBgS3jgpNdKyQvLnRlc3QodGV4dCkgfHwgYjIgJiYgL15b44KhLeODtOODvO+9sS3vvp3vvp7vvbBdKyQvLnRlc3QodGV4dCkpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBbc2VsZi5kZWJ1Z1Rva2VuKHtcblx0XHRcdFx0XHR3OiB0ZXh0LFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0W3NlbGYubmFtZV06IGIxID8gMHgxIDogMHgyLFxuXHRcdFx0XHR9LCB0cnVlKV07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGxldCByZXQ6IElXb3JkW10gPSBbXTtcblxuXHRcdHRleHRcblx0XHRcdC5zcGxpdCgvKCg/Olte44KhLeODtOODvO+9sS3vvp3vvp7vvbBdKyk/W+OBgS3jgpNdKyg/PVvjgqEt44O044O8772xLe++ne++nu+9sF0pfCg/Olte44GBLeOCk10rKT9b44KhLeODtOODvO+9sS3vvp3vvp7vvbBdKyg/PVvjgYEt44KTXSkpLylcblx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uICh3LCBpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAodyAhPT0gJycpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXQucHVzaChzZWxmLmRlYnVnVG9rZW4oe1xuXHRcdFx0XHRcdFx0dyxcblx0XHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0XHRbc2VsZi5uYW1lXTogL1vjgYEt44KTXS8udGVzdCh3KSA/IDB4MSA6IDB4Mixcblx0XHRcdFx0XHR9LCB0cnVlKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0O1xuXG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG59XG5cbmV4cG9ydCBjb25zdCBpbml0ID0gSnBTaW1wbGVUb2tlbml6ZXIuaW5pdC5iaW5kKEpwU2ltcGxlVG9rZW5pemVyKSBhcyB0eXBlb2YgSnBTaW1wbGVUb2tlbml6ZXIuaW5pdDtcblxuZXhwb3J0IGRlZmF1bHQgSnBTaW1wbGVUb2tlbml6ZXI7XG5cbiJdfQ==