"use strict";
/**
 * Created by user on 2018/7/29/029.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const uni_string_1 = require("uni-string");
function toStrTableArray(table, options = {}) {
    if (typeof table !== 'object' || Array.isArray(table)) {
        throw new TypeError(`table '${typeof table}' ${table}`);
    }
    let from = [];
    let to = [];
    const ks = Object.keys(table);
    ks.sort();
    let split = options.coreJs ? jsSplit : utf8Split;
    for (let k of ks) {
        let k2 = table[k];
        let s1 = split(k);
        let s2 = split(k2);
        if (s1.length !== 1 || s2.length !== 1) {
            let msg = `'${k}' s1: ${s1.length} ${s1} ; s2: ${s2.length} ${s2}`;
            if (options.ignore) {
                console.error(msg);
                continue;
            }
            else {
                throw new TypeError(msg);
                break;
            }
        }
        from.push(k);
        to.push(k2);
    }
    return {
        from,
        to,
    };
}
exports.toStrTableArray = toStrTableArray;
function toStrTable(table, options) {
    let { from, to, } = toStrTableArray(table, options);
    return {
        from: from.join(''),
        to: to.join(''),
    };
}
exports.toStrTable = toStrTable;
function jsSplit(s) {
    return s.split('');
}
exports.jsSplit = jsSplit;
function utf8Split(s) {
    return uni_string_1.default.split(s, '');
}
exports.utf8Split = utf8Split;
exports.default = exports;
//console.log(__filename, require.extensions);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdHJ0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBR0gsMkNBQWlDO0FBUWpDLFNBQWdCLGVBQWUsQ0FBQyxLQUUvQixFQUFFLFVBQW9CLEVBQUU7SUFFeEIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFDckQ7UUFDQyxNQUFNLElBQUksU0FBUyxDQUFDLFVBQVUsT0FBTyxLQUFLLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN4RDtJQUVELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUVaLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVYsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFakQsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ2hCO1FBQ0MsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxCLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkIsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDdEM7WUFDQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBRW5FLElBQUksT0FBTyxDQUFDLE1BQU0sRUFDbEI7Z0JBQ0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsU0FBUzthQUNUO2lCQUVEO2dCQUNDLE1BQU0sSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLE1BQU07YUFDTjtTQUNEO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDWjtJQUVELE9BQU87UUFDTixJQUFJO1FBQ0osRUFBRTtLQUNGLENBQUE7QUFDRixDQUFDO0FBaERELDBDQWdEQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxLQUUxQixFQUFFLE9BQWtCO0lBRXBCLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEdBQUcsZUFBZSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVwRCxPQUFPO1FBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25CLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNmLENBQUE7QUFDRixDQUFDO0FBVkQsZ0NBVUM7QUFFRCxTQUFnQixPQUFPLENBQUMsQ0FBUztJQUVoQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUhELDBCQUdDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLENBQVM7SUFFbEMsT0FBTyxvQkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0IsQ0FBQztBQUhELDhCQUdDO0FBRUQsa0JBQWUsT0FBc0MsQ0FBQztBQUV0RCw4Q0FBOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzcvMjkvMDI5LlxuICovXG5cbmltcG9ydCB7IHRhYmxlX3R3MmNuLCB0YWJsZV9jbjJ0dyB9IGZyb20gJy4uL3poL2NvbnZlcnQvaW5kZXgnO1xuaW1wb3J0IFVTdHJpbmcgZnJvbSAndW5pLXN0cmluZyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnNcbntcblx0Y29yZUpzPzogYm9vbGVhbixcblx0aWdub3JlPzogYm9vbGVhbixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvU3RyVGFibGVBcnJheSh0YWJsZToge1xuXHRbazogc3RyaW5nXTogc3RyaW5nLFxufSwgb3B0aW9uczogSU9wdGlvbnMgPSB7fSlcbntcblx0aWYgKHR5cGVvZiB0YWJsZSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh0YWJsZSkpXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGB0YWJsZSAnJHt0eXBlb2YgdGFibGV9JyAke3RhYmxlfWApO1xuXHR9XG5cblx0bGV0IGZyb20gPSBbXTtcblx0bGV0IHRvID0gW107XG5cblx0Y29uc3Qga3MgPSBPYmplY3Qua2V5cyh0YWJsZSk7XG5cdGtzLnNvcnQoKTtcblxuXHRsZXQgc3BsaXQgPSBvcHRpb25zLmNvcmVKcyA/IGpzU3BsaXQgOiB1dGY4U3BsaXQ7XG5cblx0Zm9yIChsZXQgayBvZiBrcylcblx0e1xuXHRcdGxldCBrMiA9IHRhYmxlW2tdO1xuXG5cdFx0bGV0IHMxID0gc3BsaXQoayk7XG5cdFx0bGV0IHMyID0gc3BsaXQoazIpO1xuXG5cdFx0aWYgKHMxLmxlbmd0aCAhPT0gMSB8fCBzMi5sZW5ndGggIT09IDEpXG5cdFx0e1xuXHRcdFx0bGV0IG1zZyA9IGAnJHtrfScgczE6ICR7czEubGVuZ3RofSAke3MxfSA7IHMyOiAke3MyLmxlbmd0aH0gJHtzMn1gO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5pZ25vcmUpXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IobXNnKTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IobXNnKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnJvbS5wdXNoKGspO1xuXHRcdHRvLnB1c2goazIpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRmcm9tLFxuXHRcdHRvLFxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1N0clRhYmxlKHRhYmxlOiB7XG5cdFtrOiBzdHJpbmddOiBzdHJpbmcsXG59LCBvcHRpb25zPzogSU9wdGlvbnMpXG57XG5cdGxldCB7IGZyb20sIHRvLCB9ID0gdG9TdHJUYWJsZUFycmF5KHRhYmxlLCBvcHRpb25zKTtcblxuXHRyZXR1cm4ge1xuXHRcdGZyb206IGZyb20uam9pbignJyksXG5cdFx0dG86IHRvLmpvaW4oJycpLFxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqc1NwbGl0KHM6IHN0cmluZylcbntcblx0cmV0dXJuIHMuc3BsaXQoJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXRmOFNwbGl0KHM6IHN0cmluZylcbntcblx0cmV0dXJuIFVTdHJpbmcuc3BsaXQocywgJycpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vc3RydGFibGUnKTtcblxuLy9jb25zb2xlLmxvZyhfX2ZpbGVuYW1lLCByZXF1aXJlLmV4dGVuc2lvbnMpO1xuIl19